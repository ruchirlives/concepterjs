import React, { useState, Suspense } from 'react';
import { AppProvider } from './AppContext';
import { TiptapProvider } from './TiptapContext';
import ReactDOM from 'react-dom/client';
import './index.css';
import AppGrid from './AppGrid';
import AppFlow from './AppFlow';
import AppLayers from './AppLayers';
import AppMap from './AppMap';
import CreateFromContentModal from './components/CreateFromContentModal';
import reportWebVitals from './reportWebVitals';
import { setPasscode, setApiUrl } from './apiConfig';
import API_URLS from './hooks/globalconfig';
import { recopyValues } from './api';

const AppTiptap = React.lazy(() => import('./AppTiptap'));
const AppMatrix = React.lazy(() => import('./AppMatrix'));
const AppKanban = React.lazy(() => import('./AppKanban'));
const AppState = React.lazy(() => import('./AppState'));
const AppMermaid = React.lazy(() => import('./AppMermaid'));
const AppD3Vis = React.lazy(() => import('./AppD3Vis'));
// const AppWordcloud = React.lazy(() => import('./AppWordcloud'));

// Simple Tabs-based navigation for subapps
const tabs = [
  { key: 'grid', label: 'Grid', render: (state) => <AppGrid isLoadModalOpen={state.isLoadModalOpen} setIsLoadModalOpen={state.setIsLoadModalOpen} /> },
  { key: 'layers', label: 'Layers', render: () => <AppLayers /> },
  { key: 'flow', label: 'Flow', render: (state) => <AppFlow keepLayout={state.keepLayout} setKeepLayout={state.setKeepLayout} /> },
  { key: 'matrix', label: 'Matrix', render: () => (
      <Suspense fallback={<div className="p-4">Loading matrix...</div>}>
        <AppMatrix />
      </Suspense>
    ) },
  { key: 'kanban', label: 'Kanban', render: () => (
      <Suspense fallback={<div className="p-4">Loading kanban...</div>}>
        <AppKanban />
      </Suspense>
    ) },
  { key: 'states', label: 'States', render: () => (
      <Suspense fallback={<div className="p-4">Loading states...</div>}>
        <AppState />
      </Suspense>
    ) },
  { key: 'donut', label: 'Donut', render: () => <AppD3Vis /> },
  { key: 'editor', label: 'Editor', render: () => (
      <Suspense fallback={<div className="p-4">Loading editor...</div>}>
        <AppTiptap />
      </Suspense>
    ) },
  { key: 'map', label: 'Map', render: () => (
      <div className="h-[600px]">
        <Suspense fallback={<div className="p-4">Loading map...</div>}>
          <AppMap />
        </Suspense>
      </div>
    ) },
  { key: 'mermaid', label: 'Mermaid', render: () => (
      <Suspense fallback={<div className="p-4">Loading diagram...</div>}>
        <AppMermaid />
      </Suspense>
    ) },
];

const handleRecopyValues = async () => {
  try {
    const result = await recopyValues();
    if (result) {
      console.log('Recopy values response:', result);
      alert('Values recopied successfully');
    } else {
      alert('Failed to recopy values');
    }
  } catch (error) {
    console.error('Error calling recopy values:', error);
    alert('Error calling recopy values');
  }
};

const ButtonPanel = ({ onLoadContainers, onCreateFromContent, keepLayout, setKeepLayout, server, setServer }) => {
  const [buttonsArray] = useState([
    { id: "writeBackButton", text: "Write Back Data" },
    { id: "loadDataButton", text: "Reload Data" },
    { id: "addRowButton", text: "Create Container" },
    { id: "loadContainersButton", text: "Load Containers", onClick: onLoadContainers },
    { id: "saveContainersButton", text: "Save Containers" },
    { id: "importContainersButton", text: "Import Containers" },
    { id: "createFromContentButton", text: "Create from Content", onClick: onCreateFromContent },
    { id: "clearButton", text: "Clear" },
    { id: "refreshButton", text: "Refresh" },
    { id: "requestRekeyButton", text: "Request Rekey" },
    { id: "requestDedupButton", text: "Request Deduplication" },
    { id: "recopyValuesButton", text: "Recopy Values", onClick: handleRecopyValues },
  ]);


  return (
    <div className="flex items-center flex-wrap gap-2 p-4 fixed bottom-0 bg-white border-t w-full z-10">
      {buttonsArray.map((btn) => (
        <button
          key={btn.id}
          id={btn.id}
          className="bg-blue-600 hover:bg-blue-700 text-white text-sm px-4 py-2 rounded"
          onClick={btn.onClick}
        >
          {btn.text}
        </button>
      ))}

      {/* Server Selector */}
      <select
        id="ServerSelector"
        className="border border-gray-300 text-sm px-2 py-1 rounded min-w-[150px]"
        value={server}
        onChange={(e) => setServer(e.target.value)}
      >
        <option value="0">Select Server</option>
        <option value="1">Server A</option>
        <option value="2">Server B</option>
      </select>

    </div>
  );
};

const App = () => {
  const [isLoadModalOpen, setIsLoadModalOpen] = useState(false);
  const [isCreateFromContentModalOpen, setIsCreateFromContentModalOpen] = useState(false);
  const [keepLayout, setKeepLayout] = useState(false);
  const [server, setServer] = useState(API_URLS?.mongo || "");
  const [passcode, setLocalPasscode] = useState("");
  const [activeTab, setActiveTab] = useState('grid');
  React.useEffect(() => {
    if (server) setApiUrl(server);
  }, [server]);

  // Ensure canvases/layouts re-measure when switching to Map tab while kept mounted
  React.useEffect(() => {
    if (activeTab === 'map') {
      requestAnimationFrame(() => {
        window.dispatchEvent(new Event('resize'));
      });
    }
  }, [activeTab]);

  const handleCreateFromContent = (result) => {
    console.log('Containers created:', result);
    alert(`${result.message}\nCreated ${result.container_ids.length} containers`);

    const channel = new BroadcastChannel("containerUpdateChannel");
    channel.postMessage({ type: "CONTAINERS_CREATED", data: result });
    channel.close();
  };

  return (
    <div className="min-h-screen bg-gray-50 text-gray-800 flex flex-col overflow-auto">
      {/* Header with Passcode */}
      <header className="px-6 pt-6 pb-4 bg-white border-b shadow-sm">
        <div className="flex items-center justify-between">
          <h1 className="text-3xl font-semibold text-gray-800">Concepter</h1>
          <div className="flex items-center gap-4">
            <label className="text-sm font-medium text-gray-700">
              Passcode:
            </label>
            <input
              type="password"
              placeholder="Enter passcode"
              className="border border-gray-300 text-sm px-3 py-2 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 min-w-[150px]"
              value={passcode}
              onChange={(e) => {
                setLocalPasscode(e.target.value);
                setPasscode(e.target.value);
              }}
            />
          </div>
        </div>
      </header>

      {/* Main content with Tabs */}
      <main className="flex-1 flex flex-col px-6 py-4 overflow-hidden">
        {/* Tabs header */}
        <div className="flex gap-2 border-b border-gray-200 mb-3 overflow-x-auto">
          {tabs.map(t => (
            <button
              key={t.key}
              onClick={() => setActiveTab(t.key)}
              className={`px-3 py-2 text-sm rounded-t-md border ${activeTab === t.key ? 'bg-white border-gray-200 border-b-white text-blue-700 font-medium' : 'bg-gray-100 border-transparent text-gray-700 hover:bg-gray-200'}`}
            >
              {t.label}
            </button>
          ))}
        </div>

        {/* Active tab content (keep AppGrid and AppMap mounted always) */}
        <div className="flex-1 min-h-0 overflow-auto bg-white border border-gray-200 rounded-md p-2 relative">
          {/* Persistently mounted Map layer */}
          <div
            style={{
              position: 'absolute', inset: 0,
              opacity: activeTab === 'map' ? 1 : 0,
              pointerEvents: activeTab === 'map' ? 'auto' : 'none',
            }}
            className="h-[600px]"
          >
            <Suspense fallback={<div className="p-4">Loading map...</div>}>
              <AppMap />
            </Suspense>
          </div>
          {/* Persistently mounted Grid */}
          <div style={{ display: activeTab === 'grid' ? 'block' : 'none' }}>
            <AppGrid
              isLoadModalOpen={isLoadModalOpen}
              setIsLoadModalOpen={setIsLoadModalOpen}
            />
          </div>

          {/* Persistently mounted other tabs (besides Grid/Map) */}
          {tabs
            .filter(t => t.key !== 'grid' && t.key !== 'map')
            .map(t => (
              <div key={t.key} style={{ display: activeTab === t.key ? 'block' : 'none' }}>
                {t.render({
                  isLoadModalOpen,
                  setIsLoadModalOpen,
                  keepLayout,
                  setKeepLayout,
                })}
              </div>
            ))}
        </div>
      </main>

      {/* Floating panel */}
      <ButtonPanel
        keepLayout={keepLayout}
        setKeepLayout={setKeepLayout}
        server={server}
        setServer={setServer}
        onLoadContainers={() => setIsLoadModalOpen(true)}
        onCreateFromContent={() => setIsCreateFromContentModalOpen(true)}
      />

      {/* Modals */}
      <CreateFromContentModal
        isOpen={isCreateFromContentModalOpen}
        setIsOpen={setIsCreateFromContentModalOpen}
        onCreateContainers={handleCreateFromContent}
      />
    </div>
  );
};


const root = ReactDOM.createRoot(document.getElementById('app'));
root.render(
  <React.StrictMode>
    <AppProvider>
      <TiptapProvider>
        <App />
      </TiptapProvider>
    </AppProvider>
  </React.StrictMode>
);

reportWebVitals();

